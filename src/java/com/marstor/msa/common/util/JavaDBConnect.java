/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.marstor.msa.common.util;

import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.HashSet;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Administrator
 */
public class JavaDBConnect {
    Connection conn = null;
    
    public Connection getConnection(){
        return conn;
    }

    public boolean connect() {
        try {
            Class.forName("org.apache.derby.jdbc.EmbeddedDriver").newInstance();
            Properties props = new Properties();
            props.put("user", "root");
            props.put("password", "password");
            conn = DriverManager.getConnection("jdbc:derby:/var/msa/db;create=true;", props);
        } catch (Exception ex) {
            Logger.getLogger(JavaDBConnect.class.getName()).log(Level.SEVERE, null, ex);
            return false;
        }
        return true;
    }

    public boolean createTable() {
        try {
            Statement statement = conn.createStatement();
            int result = statement.executeUpdate("create table log (id BIGINT not null generated by default as identity,datetime bigint,logid bigint,"
                    + "type int,username varchar(32) ,parameters varchar(1024),flag int,moduleID int )");
            System.out.println("result " + result);
        } catch (SQLException ex) {
            Logger.getLogger(JavaDBConnect.class.getName()).log(Level.SEVERE, null, ex);
            return false;
        } finally {
            try {
                conn.close();
            } catch (SQLException ex) {
                Logger.getLogger(JavaDBConnect.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return true;
    }

    public boolean insert() {
        try {
            PreparedStatement statement = conn
                    .prepareStatement("insert into log (datetime,logid,type,username,parameters,flag,moduleID) values(?,?,?,?,?,?,?)");
            statement.setLong(1, 3333);
            statement.setLong(2, 22222);
            statement.setInt(3, 1);
            statement.setString(4, "admin");
            statement.setString(5, "adasd");
            statement.setInt(6, 2);
            statement.setInt(7, 3);
            statement.execute();
        } catch (SQLException ex) {
            Logger.getLogger(JavaDBConnect.class.getName()).log(Level.SEVERE, null, ex);
            return false;
        } finally {
            try {
                conn.close();
            } catch (SQLException ex) {
                Logger.getLogger(JavaDBConnect.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return true;
    }

    public boolean query() {
        try {
            Statement statement = conn.createStatement();
            ResultSet rs = statement.executeQuery("select * from log");
            while (rs.next()) {
                System.out.println(rs.getLong(1));
                System.out.println(rs.getLong(2));
                System.out.println(rs.getLong(3));
                System.out.println(rs.getInt(4));
                System.out.println(rs.getString(5));
                System.out.println(rs.getString(6));
                System.out.println(rs.getInt(7));
                System.out.println(rs.getInt(8));
            }

        } catch (SQLException ex) {
            Logger.getLogger(JavaDBConnect.class.getName()).log(Level.SEVERE, null, ex);
            return false;
        } finally {
            try {
                if (conn == null) {
                    conn.close();
                }
            } catch (SQLException ex) {
                Logger.getLogger(JavaDBConnect.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return true;
    }

    public Boolean doesTableExist(String tablename) {
        connect();
        HashSet<String> set = new HashSet<String>();
        try {
            DatabaseMetaData meta = conn.getMetaData();
            ResultSet res = meta.getTables(null, null, null,
                    new String[]{"TABLE"});
            while (res.next()) {
                set.add(res.getString("TABLE_NAME"));
            }
            res.close();
            conn.close();
        } catch (Exception e) {
            System.err.println("Exception: " + e.getMessage());
        }
        //System.out.println(set);
        return set.contains(tablename.toUpperCase());
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        JavaDBConnect db = new JavaDBConnect();
        if (args.length != 0 && args[0].equals("create")) {
            db.connect();
            db.createTable();
        } else if (args.length != 0 && args[0].equals("insert")) {
            db.connect();
            db.insert();
        } else {
            db.connect();
            db.query();
        }
        System.out.println(db.doesTableExist("mylog"));
    }

    public PreparedStatement prepareStatement(String insert_into_log_datetimelogidtypeusername) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
